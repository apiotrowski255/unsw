/*
 * Parser.java            
 *
 * This parser for a subset of the VC language is intended to 
 *  demonstrate how to create the AST nodes, including (among others): 
 *  [1] a list (of statements)
 *  [2] a function
 *  [3] a statement (which is an expression statement), 
 *  [4] a unary expression
 *  [5] a binary expression
 *  [6] terminals (identifiers, integer literals and operators)
 *
 * In addition, it also demonstrates how to use the two methods start 
 * and finish to determine the position information for the start and 
 * end of a construct (known as a phrase) corresponding an AST node.
 *
 * NOTE THAT THE POSITION INFORMATION WILL NOT BE MARKED. HOWEVER, IT CAN BE
 * USEFUL TO DEBUG YOUR IMPLEMENTATION.
 *
 * --- 4 March 2021 --- 


program       -> func-decl
func-decl     -> type identifier "(" ")" compound-stmt
type          -> void
identifier    -> ID
// statements
compound-stmt -> "{" stmt* "}" 
stmt          -> expr-stmt
expr-stmt     -> expr? ";"
// expressions 
expr                -> additive-expr
additive-expr       -> multiplicative-expr
                    |  additive-expr "+" multiplicative-expr
                    |  additive-expr "-" multiplicative-expr
multiplicative-expr -> unary-expr
	            |  multiplicative-expr "*" unary-expr
	            |  multiplicative-expr "/" unary-expr
unary-expr          -> "-" unary-expr
		    |  primary-expr

primary-expr        -> identifier
 		    |  INTLITERAL
		    | "(" expr ")"
 */

package VC.Parser;

import VC.Scanner.Scanner;
import VC.Scanner.SourcePosition;
import VC.Scanner.Token;
import VC.ErrorReporter;
import VC.ASTs.*;

public class Parser {

  private Scanner scanner;
  private ErrorReporter errorReporter;
  private Token currentToken;
  private SourcePosition previousTokenPosition;
  private SourcePosition dummyPos = new SourcePosition();

  public Parser (Scanner lexer, ErrorReporter reporter) {
    scanner = lexer;
    errorReporter = reporter;

    previousTokenPosition = new SourcePosition();

    currentToken = scanner.getToken();
  }

// match checks to see f the current token matches tokenExpected.
// If so, fetches the next token.
// If not, reports a syntactic error.

  void match(int tokenExpected) throws SyntaxError {
    if (currentToken.kind == tokenExpected) {
      previousTokenPosition = currentToken.position;
      currentToken = scanner.getToken();
    } else {
      syntacticError("\"%\" expected here", Token.spell(tokenExpected));
    }
  }

  void accept() {
    previousTokenPosition = currentToken.position;
    currentToken = scanner.getToken();
  }

  void syntacticError(String messageTemplate, String tokenQuoted) throws SyntaxError {
    SourcePosition pos = currentToken.position;
    errorReporter.reportError(messageTemplate, tokenQuoted, pos);
    throw(new SyntaxError());
  }

// start records the position of the start of a phrase.
// This is defined to be the position of the first
// character of the first token of the phrase.

  void start(SourcePosition position) {
    position.lineStart = currentToken.position.lineStart;
    position.charStart = currentToken.position.charStart;
  }

// finish records the position of the end of a phrase.
// This is defined to be the position of the last
// character of the last token of the phrase.

  void finish(SourcePosition position) {
    position.lineFinish = previousTokenPosition.lineFinish;
    position.charFinish = previousTokenPosition.charFinish;
  }

  void copyStart(SourcePosition from, SourcePosition to) {
    to.lineStart = from.lineStart;
    to.charStart = from.charStart;
  }

// ========================== PROGRAMS ========================

  public Program parseProgram() {

    Program programAST = null;
    
    SourcePosition programPos = new SourcePosition();
    start(programPos);

    try {
      List dlAST = parseFuncDeclList();
      finish(programPos);
      programAST = new Program(dlAST, programPos); 
      if (currentToken.kind != Token.EOF) {
        syntacticError("\"%\" unknown type", currentToken.spelling);
      }
    }
    catch (SyntaxError s) { return null; }
    return programAST;
  }

// ========================== DECLARATIONS ========================

  List parseFuncDeclList() throws SyntaxError {
    List dlAST = null;
    Decl dAST = null;

    SourcePosition funcPos = new SourcePosition();
    start(funcPos);

    dAST = parseFuncDecl();
    
    if (currentToken.kind == Token.VOID || currentToken.kind == Token.INT || currentToken.kind == Token.FLOAT || currentToken.kind == Token.BOOLEAN) {
      dlAST = parseFuncDeclList();
      finish(funcPos);
      dlAST = new DeclList(dAST, dlAST, funcPos);
    } else if (dAST != null) {
      finish(funcPos);
      dlAST = new DeclList(dAST, new EmptyDeclList(dummyPos), funcPos);
    }
    if (dlAST == null) 
      dlAST = new EmptyDeclList(dummyPos);

    return dlAST;
  }

  Decl parseFuncDecl() throws SyntaxError {

    Decl fAST = null; 
    
    SourcePosition funcPos = new SourcePosition();
    start(funcPos);

    Type tAST = parseType();
    Ident iAST = parseIdent();
    if (currentToken.kind == Token.LPAREN){
      System.out.println("function declaration");
      List fplAST = parseParaList();
      Stmt cAST = parseCompoundStmt();
      finish(funcPos);
      fAST = new FuncDecl(tAST, iAST, fplAST, cAST, funcPos);
    } else {
      System.out.println("global variable declaration");
      Expr expr = null;
      if (currentToken.kind == Token.SEMICOLON) {
        match(Token.SEMICOLON);
        expr = new EmptyExpr(funcPos);
      } else if (currentToken.kind == Token.EQ) {
        System.out.println("parse expr");
        match(Token.EQ);
        expr = parseExpr();
        match(Token.SEMICOLON);
      }
      fAST = new GlobalVarDecl(tAST, iAST, expr, funcPos);
    }
    
    return fAST;
  }

//  ======================== TYPES ==========================

  Type parseType() throws SyntaxError {
    Type typeAST = null;

    SourcePosition typePos = new SourcePosition();
    start(typePos);
    int functionType = currentToken.kind;
    accept();
    finish(typePos);
    
    if (functionType == Token.VOID) {
      typeAST = new VoidType(typePos);
    } else if (functionType == Token.INT) {
      typeAST = new IntType(typePos);
    } else if (functionType == Token.FLOAT) {
      typeAST = new FloatType(typePos);
    } else if (functionType == Token.BOOLEAN) {
      typeAST = new BooleanType(typePos);
    } else {
      syntacticError("\"%\" unknown type - Issue in parseType function", currentToken.spelling);
    }

    return typeAST;
    }

// ======================= STATEMENTS ==============================

  Stmt parseCompoundStmt() throws SyntaxError {
    Stmt cAST = null; 

    SourcePosition stmtPos = new SourcePosition();
    start(stmtPos);

    match(Token.LCURLY);

    // Insert code here to build a DeclList node for variable declarations
    System.out.println("start dec");
    List dlAST = parseDecList();
    finish(stmtPos);
    System.out.println("dec done");
    List slAST = parseStmtList();
    finish(stmtPos);

    /* In the subset of the VC grammar, no variable declarations are
     * allowed. Therefore, a block is empty if it has no statements.
     */
    if (slAST instanceof EmptyStmtList) 
      cAST = new EmptyCompStmt(stmtPos);
    else
      cAST = new CompoundStmt(dlAST, slAST, stmtPos);
    match(Token.RCURLY);
    return cAST;
  }

  List parseDecList() throws SyntaxError {
    List dlAST = null;
    
    SourcePosition decPos = new SourcePosition();
    start(decPos);
    
    if (currentToken.kind == Token.INT || currentToken.kind == Token.FLOAT || currentToken.kind == Token.BOOLEAN) {
      // parse declaration
      Decl dAST = parseVarDecl();
      if (currentToken.kind == Token.INT || currentToken.kind == Token.FLOAT || currentToken.kind == Token.BOOLEAN){
        dlAST = parseDecList();
        finish(decPos);
        dlAST = new DeclList(dAST, dlAST, decPos);
      } else {
        finish(decPos);
        dlAST = new DeclList(dAST, new EmptyDeclList(dummyPos), decPos);
      }
      
    } else {
      finish(decPos);
      dlAST = new EmptyDeclList(dummyPos);
    }
    return dlAST;
  }

  Decl parseVarDecl() throws SyntaxError {
    Decl dAST = null;
    
    SourcePosition varDeclPos = new SourcePosition();
    start(varDeclPos);
    
    Type tAST = null;
    Ident iAST = null;
    Expr eAST = null;
    
    if (currentToken.kind == Token.INT){
      tAST = new IntType(varDeclPos);
      match(Token.INT);
    } else if (currentToken.kind == Token.FLOAT) {
      tAST = new FloatType(varDeclPos);
      match(Token.FLOAT);
    } else if (currentToken.kind == Token.BOOLEAN) {
      tAST = new BooleanType(varDeclPos);
      match(Token.BOOLEAN);
    } else {
      syntacticError("Expected Type here", currentToken.spelling);
    }
    
    if (currentToken.kind == Token.ID) {
      iAST = new Ident(currentToken.spelling, varDeclPos);
      match(Token.ID);
    }
    
    if (currentToken.kind == Token.SEMICOLON) {
      eAST = new EmptyExpr(varDeclPos);
      match(Token.SEMICOLON);
    } else {
      eAST = parseExpr();
      match(Token.SEMICOLON);
    }
    finish(varDeclPos);
    dAST = new LocalVarDecl(tAST, iAST, eAST, varDeclPos);
    return dAST;
  }


  List parseStmtList() throws SyntaxError {
    List slAST = null; 

    SourcePosition stmtPos = new SourcePosition();
    start(stmtPos);
    System.out.println(currentToken.toString());
    if (currentToken.kind != Token.RCURLY) {
      Stmt sAST = parseStmt();
      {
        if (currentToken.kind != Token.RCURLY) {
          slAST = parseStmtList();
          finish(stmtPos);
          slAST = new StmtList(sAST, slAST, stmtPos);
        } else {
          finish(stmtPos);
          slAST = new StmtList(sAST, new EmptyStmtList(dummyPos), stmtPos);
        }
      }
    } else {
      slAST = new EmptyStmtList(dummyPos);
    }
    return slAST;
  }

  Stmt parseStmt() throws SyntaxError {
    Stmt sAST = null;

    switch(currentToken.kind) {
      case Token.LCURLY:
        sAST = parseCompoundStmt();
        break;
      case Token.IF:
        sAST = parseIfStmt();
        break;
      case Token.FOR:
         sAST = parseForStmt();
         break;
      case Token.WHILE:
         sAST = parseWhileStmt();
         break;
      case Token.BREAK:
        sAST = parseBreakStmt();
        break;
      case Token.CONTINUE:
        sAST = parseContinueStmt();
        break;
      case Token.RETURN:
        sAST = parseReturnStmt();
        break;
      default:
        sAST = parseExprStmt();
        break;
    }

    return sAST;
  }
  
  Stmt parseForStmt() throws SyntaxError {
    Stmt forStmt = null;
    System.out.println("testing For");
    SourcePosition stmtPos = new SourcePosition();
    start(stmtPos);
    
    match(Token.FOR);
    match(Token.LPAREN);
    
    Expr e1 = null;
    Expr e2 = null;
    Expr e3 = null;
    if (currentToken.kind != Token.SEMICOLON){
      e1 = parseExpr();
    } else {
      finish(stmtPos);
      e1 = new EmptyExpr(stmtPos);
    }
    match(Token.SEMICOLON);
    if (currentToken.kind != Token.SEMICOLON){
      e2 = parseExpr();
    } else {
      finish(stmtPos);
      e2 =  new EmptyExpr(stmtPos);
    }
    match(Token.SEMICOLON);
    if (currentToken.kind != Token.RPAREN){
      e3 = parseExpr();
    } else {
      finish(stmtPos);
      e3 =  new EmptyExpr(stmtPos);
    }
    match(Token.RPAREN);
    
    Stmt sAST = parseStmt();
    finish(stmtPos);
    forStmt = new ForStmt(e1, e2, e3, sAST, stmtPos);
    
    return forStmt;
  }
  
  Stmt parseWhileStmt() throws SyntaxError {
    Stmt whileStmt = null;
    System.out.println("testing while");
    SourcePosition stmtPos = new SourcePosition();
    start(stmtPos);
    
    match(Token.WHILE);
    match(Token.LPAREN);
    Expr eAST = parseExpr();
    match(Token.RPAREN);
    Stmt sAST = null;
    if (currentToken.kind == Token.LCURLY){
      sAST = parseCompoundStmt();
    } else {
      sAST = parseStmt();
    }
    
    whileStmt = new WhileStmt(eAST, sAST, stmtPos);
    return whileStmt;
  }
  
  Stmt parseIfStmt() throws SyntaxError {
    Stmt ifStmt = null;
  
    SourcePosition stmtPos = new SourcePosition();
    start(stmtPos);
  
    match(Token.IF);
    match(Token.LPAREN);
    Expr eAST = parseExpr();
    match(Token.RPAREN);

    Stmt s1AST = parseStmt();
    System.out.println("finish here");
    
    if (currentToken.kind == Token.ELSE){
      match(Token.ELSE);
      Stmt s2AST = parseStmt();
      ifStmt = new IfStmt(eAST, s1AST, s2AST, stmtPos);
    } else {
      ifStmt = new IfStmt(eAST, s1AST, stmtPos);
    }
    return ifStmt;
  }
  
  Stmt parseReturnStmt() throws SyntaxError {
    match(Token.RETURN);
    Stmt rAST = null;
    
    SourcePosition stmtPos = new SourcePosition();
    start(stmtPos);
    
    Expr intExpr = null;
    
    if (currentToken.kind == Token.INTLITERAL){
      IntLiteral intLiteral = new IntLiteral(currentToken.spelling, stmtPos);
      intExpr = new IntExpr(intLiteral, stmtPos);
      match(Token.INTLITERAL);
    } else if (currentToken.kind == Token.SEMICOLON) {
      intExpr = new EmptyExpr(stmtPos);
    } else {
      intExpr = parseExpr();
    }
    
    match(Token.SEMICOLON);
    finish(stmtPos);
    rAST = new ReturnStmt(intExpr, stmtPos);
    return rAST;
  }

  Stmt parseContinueStmt() throws SyntaxError {
    Stmt cAST = null;

    SourcePosition stmtPos = new SourcePosition();
    start(stmtPos);
    
    match(Token.CONTINUE);
    match(Token.SEMICOLON);
    
    cAST = new ContinueStmt(stmtPos);
    return cAST;
  }

  Stmt parseBreakStmt() throws SyntaxError {
    Stmt bAST = null;

    SourcePosition stmtPos = new SourcePosition();
    start(stmtPos);
    
    match(Token.BREAK);
    match(Token.SEMICOLON);
    
    bAST = new BreakStmt(stmtPos);
    return bAST;
  }

  Stmt parseExprStmt() throws SyntaxError {
    Stmt sAST = null;

    SourcePosition stmtPos = new SourcePosition();
    start(stmtPos);

    if (currentToken.kind != Token.SEMICOLON){
      Expr eAST = parseExpr();
      finish(stmtPos);
      sAST = new ExprStmt(eAST, stmtPos);
    } else {
      Expr eAST = new EmptyExpr(stmtPos); 
      finish(stmtPos);
      sAST = new ExprStmt(eAST, stmtPos);
    }
    match(Token.SEMICOLON);
    
    return sAST;
  }


// ======================= PARAMETERS =======================

  List parseParaList() throws SyntaxError {
    List formalsAST = null;

    SourcePosition formalsPos = new SourcePosition();
    start(formalsPos);

    match(Token.LPAREN);
    if (currentToken.kind == Token.RPAREN){
      match(Token.RPAREN);
      finish(formalsPos);
      formalsAST = new EmptyParaList (formalsPos);
    } else {
      formalsAST = para_list();
    }

    return formalsAST;
  }
  
  List para_list() throws SyntaxError {
    ParaList plAST = null;  
    if (currentToken.kind != Token.RPAREN){
      plAST = proper_para_list();
    }
    match(Token.RPAREN);
    
    return plAST;
  }
   
  ParaList proper_para_list() throws SyntaxError {
    ParaList plAST = null;
    SourcePosition plPos = new SourcePosition();
    start(plPos);
   
    ParaDecl pdAST = parseParaDecl();
    if (currentToken.kind == Token.COMMA){
      match(Token.COMMA);
      ParaList pl2AST = proper_para_list();
      finish(plPos);
      plAST = new ParaList(pdAST, pl2AST, plPos);
    } else {
      finish(plPos);
      plAST = new ParaList(pdAST, new EmptyParaList (plPos), plPos);
    }
    return plAST;
  }
   
  ParaDecl parseParaDecl() throws SyntaxError {
    ParaDecl pdAST = null;
    SourcePosition parseParaPos = new SourcePosition();
    start(parseParaPos);
    
    Type type = type();
    Ident iAST = declarator();
    
    finish(parseParaPos);
    pdAST = new ParaDecl(type, iAST, parseParaPos);
    
    return pdAST;
  }

  Type type() throws SyntaxError {
    Type type = null;
    SourcePosition typePos = new SourcePosition();
    start(typePos);
      
    if (currentToken.kind == Token.VOID || currentToken.kind == Token.BOOLEAN || currentToken.kind == Token.INT || currentToken.kind == Token.FLOAT){
      finish(typePos);
      if (currentToken.kind == Token.VOID) {
         type = new VoidType(typePos);
      } else if (currentToken.kind == Token.BOOLEAN) {
         type = new BooleanType(typePos);
      } else if (currentToken.kind == Token.INT) {
         type = new IntType(typePos);
      } else if (currentToken.kind == Token.FLOAT) {
         type = new FloatType(typePos);
      }
      match(currentToken.kind);
    } else {
      syntacticError("\"%\" wrong result type for a function", currentToken.spelling);
    }
    
    return type;
  }
   
  Ident declarator() throws SyntaxError {
    Ident iAST = null;
    SourcePosition decPos = new SourcePosition();
    start(decPos);
    String id = currentToken.spelling;
    match(Token.ID);
    if (currentToken.kind == Token.LBRACKET){
      System.out.println("time to implement this");
      match(Token.LBRACKET);
      if (currentToken.kind == Token.INTLITERAL){
        match(Token.INTLITERAL);
      }
        match(Token.RBRACKET);
    } else {
      finish(decPos);
      iAST = new Ident(id, decPos);
    }
      
      return iAST;
   }

// ======================= EXPRESSIONS ======================


  Expr parseExpr() throws SyntaxError {
    Expr exprAST = null;
    exprAST = parseAssignExpr();
    return exprAST;
  }
  
  Expr parseAssignExpr() throws SyntaxError {
    Expr assignExpr = null;
    
    
    SourcePosition assignStartPos = new SourcePosition();
    start(assignStartPos);
    
    assignExpr = parseCondOrExpr();
    while (currentToken.kind == Token.EQ){
      match (Token.EQ);
      
      Expr e2AST = parseAssignExpr();
      
      SourcePosition assignPos = new SourcePosition();
      copyStart(assignStartPos, assignPos);
      finish(assignPos);
      assignExpr = new AssignExpr(assignExpr, e2AST, assignPos);
      // assignExpr = new AssignExpr(e2AST, assignExpr, assignPos);
    }
    return assignExpr;
  }
  
  Expr parseCondOrExpr() throws SyntaxError {
    Expr orAST = null;
    
    SourcePosition orStartPos = new SourcePosition();
    start(orStartPos);
  
    orAST = parseCondAndExpr();
    while (currentToken.kind == Token.OROR){
      Operator opAST = acceptOperator();
      Expr e2AST = parseCondAndExpr();
      
      SourcePosition orPos = new SourcePosition();
      copyStart(orStartPos, orPos);
      finish(orPos);
      orAST = new BinaryExpr(orAST, opAST, e2AST, orPos);
      // orAST = new BinaryExpr(e2AST, opAST, orAST, orPos);
    }
    return orAST;
  }
  
  Expr parseCondAndExpr() throws SyntaxError {
    Expr andAST = null;
    
    SourcePosition andStartPos = new SourcePosition();
    start(andStartPos);
  
    andAST = parseEqualityExpr();
    while (currentToken.kind == Token.ANDAND){
      Operator opAST = acceptOperator();
      Expr e2AST = parseEqualityExpr();
      
      SourcePosition andPos = new SourcePosition();
      copyStart(andStartPos, andPos);
      finish(andPos);
      andAST = new BinaryExpr(andAST, opAST, e2AST, andPos);
      // andAST = new BinaryExpr(e2AST, opAST, andAST, andPos);
    }
    
    return andAST;
  }
  
  Expr parseEqualityExpr() throws SyntaxError {
    Expr eqAST = null;
    
    SourcePosition eqStartPos = new SourcePosition();
    start(eqStartPos);
    
    eqAST = parseRelExpr();
    while (currentToken.kind == Token.EQEQ || currentToken.kind == Token.NOTEQ){
      Operator opAST = acceptOperator();
      Expr e2AST = parseRelExpr();
      
      SourcePosition eqPos = new SourcePosition();
      copyStart(eqStartPos, eqPos);
      finish(eqPos);
      eqAST = new BinaryExpr(eqAST, opAST, e2AST, eqPos);
      // eqAST = new BinaryExpr(e2AST, opAST, eqAST, eqPos);
    }
    return eqAST;
  }
  
  Expr parseRelExpr() throws SyntaxError {
    Expr relAST = null;
    
    SourcePosition relStartPos = new SourcePosition();
    start(relStartPos);
    
    relAST = parseAdditiveExpr();
    while (currentToken.kind == Token.LT || currentToken.kind == Token.LTEQ || currentToken.kind == Token.GT || currentToken.kind == Token.GTEQ){
      Operator opAST = acceptOperator();
      Expr e2AST = parseAdditiveExpr();
      
      SourcePosition relPos = new SourcePosition();
      copyStart(relStartPos, relPos);
      finish(relPos);
      relAST = new BinaryExpr(relAST, opAST, e2AST, relPos);
    }
    return relAST;
  }

  Expr parseAdditiveExpr() throws SyntaxError {
    Expr exprAST = null;

    SourcePosition addStartPos = new SourcePosition();
    start(addStartPos);

    exprAST = parseMultiplicativeExpr();
    while (currentToken.kind == Token.PLUS || currentToken.kind == Token.MINUS) {
      Operator opAST = acceptOperator();
      Expr e2AST = parseMultiplicativeExpr();

      SourcePosition addPos = new SourcePosition();
      copyStart(addStartPos, addPos);
      finish(addPos);
      exprAST = new BinaryExpr(exprAST, opAST, e2AST, addPos);
    }
    return exprAST;
  }

  Expr parseMultiplicativeExpr() throws SyntaxError {

    Expr exprAST = null;

    SourcePosition multStartPos = new SourcePosition();
    start(multStartPos);

    exprAST = parseUnaryExpr();
    while (currentToken.kind == Token.MULT || currentToken.kind == Token.DIV) {
      Operator opAST = acceptOperator();
      Expr e2AST = parseUnaryExpr();
      SourcePosition multPos = new SourcePosition();
      copyStart(multStartPos, multPos);
      finish(multPos);
      exprAST = new BinaryExpr(exprAST, opAST, e2AST, multPos);
      // exprAST = new BinaryExpr(e2AST, opAST, exprAST, multPos);
    }
    return exprAST;
  }

  Expr parseUnaryExpr() throws SyntaxError {

    Expr exprAST = null;

    SourcePosition unaryPos = new SourcePosition();
    start(unaryPos);

    switch (currentToken.kind) {
      case Token.NOT:
      case Token.PLUS:
      case Token.MINUS:
        Operator opAST = acceptOperator();
        Expr e2AST = parseUnaryExpr();
        finish(unaryPos);
        exprAST = new UnaryExpr(opAST, e2AST, unaryPos);
        break;
      default:
        exprAST = parsePrimaryExpr();
        break;
       
    }
    return exprAST;
  }

  Expr parsePrimaryExpr() throws SyntaxError {

    Expr exprAST = null;

    SourcePosition primPos = new SourcePosition();
    start(primPos);

    switch (currentToken.kind) {
      case Token.ID:
        Ident iAST = parseIdent();
        if (currentToken.kind == Token.LPAREN){
          System.out.println("function");
          List alAST = null;
          alAST = parseArgList();
          finish(primPos);
          exprAST = new CallExpr(iAST, alAST, primPos); 
        } else if (currentToken.kind == Token.LBRACKET) {
          System.out.println("array");
          Var vAST = new SimpleVar(iAST, primPos);
          match(Token.LBRACKET);
          IntLiteral ilAST = parseIntLiteral();
          IntExpr intExpr = new IntExpr(ilAST, primPos);
          exprAST = new ArrayExpr(vAST, intExpr, primPos);
          match(Token.RBRACKET);
        } else {
          finish(primPos);
          Var simVAST = new SimpleVar(iAST, primPos);
          exprAST = new VarExpr(simVAST, primPos);
        }
        break;
      case Token.LPAREN:
        accept();
        exprAST = parseExpr();
	      match(Token.RPAREN);
        break;
      case Token.INTLITERAL:
        IntLiteral ilAST = parseIntLiteral();
        finish(primPos);
        exprAST = new IntExpr(ilAST, primPos);
        break;
      case Token.FLOATLITERAL:
        FloatLiteral flAST = parseFloatLiteral();
        finish(primPos);
        exprAST = new FloatExpr(flAST, primPos);
        break;
      case Token.BOOLEANLITERAL:
        BooleanLiteral blAST = parseBooleanLiteral();
        finish(primPos);
        exprAST = new BooleanExpr(blAST, primPos);
        break;
      case Token.STRINGLITERAL:
        StringLiteral slAST = parseStringLiteral();
        finish(primPos);
        exprAST = new StringExpr(slAST, primPos);
        break;
      default:
        syntacticError("illegal primary expression", currentToken.spelling);
       
    }
    return exprAST;
  }

// ========================== ARGS ========================


   List parseArgList() throws SyntaxError {
    
    match(Token.LPAREN);
    List alAST = null;
    
    SourcePosition argListPos = new SourcePosition();
    start(argListPos);
    
    if (currentToken.kind != Token.RPAREN){
      alAST = parseProperArgList();
    } else {
      finish(argListPos);
      alAST = new EmptyArgList(argListPos);
    } 
    match(Token.RPAREN);
    
    return alAST;
   }

  List parseProperArgList() throws SyntaxError {
    List palAST = null;
  
    SourcePosition argListPos = new SourcePosition();
    start(argListPos);
  
    Arg aAST = parseArg();
    
    if (currentToken.kind == Token.COMMA){
      match(Token.COMMA);
      List pal2AST = parseProperArgList();
      finish(argListPos);
      palAST = new ArgList(aAST, pal2AST, argListPos);
    } else {
      finish(argListPos);
      palAST = new ArgList(aAST, new EmptyArgList(argListPos), argListPos);
    }
    
    return palAST;
  }
  
  Arg parseArg() throws SyntaxError {
    Arg paAST = null;
    
    SourcePosition argPos = new SourcePosition();
    start(argPos);
    
    Expr eAST = parseExpr();
    
    finish(argPos);
    paAST = new Arg(eAST, argPos);
    return paAST;
  }



// ========================== ID, OPERATOR and LITERALS ========================

  Ident parseIdent() throws SyntaxError {

    Ident I = null; 

    if (currentToken.kind == Token.ID) {
      previousTokenPosition = currentToken.position;
      String spelling = currentToken.spelling;
      I = new Ident(spelling, previousTokenPosition);
      currentToken = scanner.getToken();
    } else 
      syntacticError("identifier expected here", "");
    return I;
  }

// acceptOperator parses an operator, and constructs a leaf AST for it

  Operator acceptOperator() throws SyntaxError {
    Operator O = null;

    previousTokenPosition = currentToken.position;
    String spelling = currentToken.spelling;
    O = new Operator(spelling, previousTokenPosition);
    currentToken = scanner.getToken();
    return O;
  }


  IntLiteral parseIntLiteral() throws SyntaxError {
    IntLiteral IL = null;

    if (currentToken.kind == Token.INTLITERAL) {
      String spelling = currentToken.spelling;
      accept();
      IL = new IntLiteral(spelling, previousTokenPosition);
    } else 
      syntacticError("integer literal expected here", "");
    return IL;
  }

  FloatLiteral parseFloatLiteral() throws SyntaxError {
    FloatLiteral FL = null;

    if (currentToken.kind == Token.FLOATLITERAL) {
      String spelling = currentToken.spelling;
      accept();
      FL = new FloatLiteral(spelling, previousTokenPosition);
    } else 
      syntacticError("float literal expected here", "");
    return FL;
  }

  BooleanLiteral parseBooleanLiteral() throws SyntaxError {
    BooleanLiteral BL = null;

    if (currentToken.kind == Token.BOOLEANLITERAL) {
      String spelling = currentToken.spelling;
      accept();
      BL = new BooleanLiteral(spelling, previousTokenPosition);
    } else 
      syntacticError("boolean literal expected here", "");
    return BL;
  }
  
  StringLiteral parseStringLiteral() throws SyntaxError {
    StringLiteral SL = null;
    
    if (currentToken.kind == Token.STRINGLITERAL) {
      String spelling = currentToken.spelling;
      accept();
      SL = new StringLiteral(spelling, previousTokenPosition);
    } else {
      syntacticError("String literal expected here", "");
    }
    return SL;
  }

}

