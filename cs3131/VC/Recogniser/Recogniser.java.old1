/***
 * *
 * * Recogniser.java            
 * *
 ***/

/* At this stage, this parser accepts a subset of VC defined	by
 * the following grammar. 
 *
 * You need to modify the supplied parsing methods (if necessary) and 
 * add the missing ones to obtain a parser for the VC language.
 *
 * [25 Feb 2021]

program       -> func-decl

// declaration

func-decl     -> void identifier "(" ")" compound-stmt

identifier    -> ID

// statements 
compound-stmt -> "{" stmt* "}" 
stmt          -> continue-stmt
    	      |  expr-stmt
continue-stmt -> continue ";"
expr-stmt     -> expr? ";"

// expressions 
expr                -> assignment-expr
assignment-expr     -> additive-expr
additive-expr       -> multiplicative-expr
                    |  additive-expr "+" multiplicative-expr
multiplicative-expr -> unary-expr
	            |  multiplicative-expr "*" unary-expr
unary-expr          -> "-" unary-expr
		    |  primary-expr

primary-expr        -> identifier
 		    |  INTLITERAL
		    | "(" expr ")"
*/

package VC.Recogniser;

import VC.Scanner.Scanner;
import VC.Scanner.SourcePosition;
import VC.Scanner.Token;
import VC.ErrorReporter;

public class Recogniser {

  private Scanner scanner;
  private ErrorReporter errorReporter;
  private Token currentToken;

  public Recogniser (Scanner lexer, ErrorReporter reporter) {
    scanner = lexer;
    errorReporter = reporter;

    currentToken = scanner.getToken();
  }

// match checks to see f the current token matches tokenExpected.
// If so, fetches the next token.
// If not, reports a syntactic error.

  void match(int tokenExpected) throws SyntaxError {
    if (currentToken.kind == tokenExpected) {
      currentToken = scanner.getToken();
    } else {
      System.out.println(currentToken.kind);
      syntacticError("\"%\" expected here", Token.spell(tokenExpected));
    }
  }

 // accepts the current token and fetches the next
  void accept() {
    currentToken = scanner.getToken();
  }

  void syntacticError(String messageTemplate, String tokenQuoted) throws SyntaxError {
    SourcePosition pos = currentToken.position;
    errorReporter.reportError(messageTemplate, tokenQuoted, pos);
    throw(new SyntaxError());
  }


// ========================== PROGRAMS ========================

  public void parseProgram() {

    try {
      parseFuncDecl();
      
      while (currentToken.kind != Token.EOF){
         parseFuncDecl();
      }
      
      if (currentToken.kind != Token.EOF) {
        syntacticError("\"%\" wrong result type for a function", currentToken.spelling);
      }
    }
    catch (SyntaxError s) {  }
  }

// ========================== DECLARATIONS ========================

  void parseFuncDecl() throws SyntaxError {
   
    int currentTokenKind = currentToken.kind;
    if (currentTokenKind == Token.VOID){
      match(Token.VOID);
    } else if (currentTokenKind == Token.INT){
      match(Token.INT);
    } else if (currentTokenKind == Token.FLOAT){
      match(Token.FLOAT);
    } else if (currentTokenKind == Token.BOOLEAN){
      match(Token.BOOLEAN);
    }
    parseIdent();
    
    if (currentToken.kind == Token.LPAREN){
       // inside the brackets can be any number of arguments
       match(Token.LPAREN);
       while (currentToken.kind != Token.RPAREN){
         if (currentToken.kind == Token.INT){
            match(Token.INT);
            match(Token.ID);
         } else if (currentToken.kind == Token.FLOAT){
            match(Token.FLOAT);
            match(Token.ID);
         } else if (currentToken.kind == Token.BOOLEAN){
            match(Token.BOOLEAN);
            match(Token.ID);
         }
      
         // This will mean that int A(int b, int c,) is allowed. The last comma should produce an error
         if (currentToken.kind == Token.COMMA){
            match(Token.COMMA);
         }
      }
      match(Token.RPAREN);
    }
    parseCompoundStmt();
  }

   void parseVariableDecl() throws SyntaxError {
      
   }

// ======================= STATEMENTS ==============================


  void parseCompoundStmt() throws SyntaxError {

    match(Token.LCURLY);
    parseStmtList();
    match(Token.RCURLY);
  }

 // Here, a new nontermial has been introduced to define { stmt } *
  void parseStmtList() throws SyntaxError {

    while (currentToken.kind != Token.RCURLY) 
      parseStmt();
  }

   void parseStmt() throws SyntaxError {
      // System.out.println("Current token is: " + currentToken.kind);
      switch (currentToken.kind) {
         case Token.BOOLEANLITERAL:
            parseBooleanLiteralStmt();
            break;
         case Token.BREAK:
            parseBreakStmt();
            break;
         case Token.CONTINUE:
            parseContinueStmt();
            break;
         case Token.INT:
            parseIntStmt();   
            break;
         case Token.RETURN:
            parseReturnStmt();
            break;
         case Token.ID:
            parseIdStmt();
            break;
         
            
         default:

            parseExprStmt();
            break;

    }
  }
   void parseBooleanLiteralStmt() throws SyntaxError {
      match(Token.BOOLEANLITERAL);
      match(Token.SEMICOLON);
   }  

  
  void parseIdStmt() throws SyntaxError {
      while (currentToken.kind == Token.ID || currentToken.kind == Token.EQ){
         if (currentToken.kind == Token.ID){
            match(Token.ID);
         } else if (currentToken.kind == Token.EQ){
            match(Token.EQ);
         }
      }
      if (currentToken.kind == Token.INTLITERAL){
         match(Token.INTLITERAL);
      } else if (currentToken.kind == Token.LPAREN){
         match(Token.LPAREN);
         while (currentToken.kind != Token.RPAREN){
            // System.out.println(currentToken.kind);
            if (currentToken.kind == Token.INTLITERAL){
               match(Token.INTLITERAL);
            }
            if (currentToken.kind == Token.ID){
               match(Token.ID);
            }
            if (currentToken.kind == Token.COMMA){
               match(Token.COMMA);
            }
         }
         match(Token.RPAREN);
      }
      match(Token.SEMICOLON);
  }
  
  void parseIntStmt() throws SyntaxError {
      match(Token.INT);
      match(Token.ID);
  }
  
  // This will need reviewing, as returning 100 is possible.
  void parseReturnStmt() throws SyntaxError {
      match(Token.RETURN);
      match(Token.SEMICOLON);
  }

  void parseContinueStmt() throws SyntaxError {

    match(Token.CONTINUE);
    match(Token.SEMICOLON);

  }
  
   void parseBreakStmt() throws SyntaxError {
      match(Token.BREAK);
      match(Token.SEMICOLON);     
   }

  void parseExprStmt() throws SyntaxError {

    if (currentToken.kind == Token.ID || currentToken.kind == Token.INTLITERAL || currentToken.kind == Token.MINUS || currentToken.kind == Token.LPAREN) {
      
        parseExpr();
        match(Token.SEMICOLON);
    } else {

      match(Token.SEMICOLON);
    }
  }


// ======================= IDENTIFIERS ======================

 // Call parseIdent rather than match(Token.ID). 
 // In Assignment 3, an Identifier node will be constructed in here.


  void parseIdent() throws SyntaxError {

    if (currentToken.kind == Token.ID) {
      currentToken = scanner.getToken();
    } else 
      syntacticError("identifier expected here", "");
  }

// ======================= OPERATORS ======================

 // Call acceptOperator rather than accept(). 
 // In Assignment 3, an Operator Node will be constructed in here.

  void acceptOperator() throws SyntaxError {

    currentToken = scanner.getToken();
  }


// ======================= EXPRESSIONS ======================

  void parseExpr() throws SyntaxError {
    parseAssignExpr();
  }


  void parseAssignExpr() throws SyntaxError {

    parseAdditiveExpr();

  }

  void parseAdditiveExpr() throws SyntaxError {

    parseMultiplicativeExpr();
    while (currentToken.kind == Token.PLUS) {
      acceptOperator();
      parseMultiplicativeExpr();
    }
  }

  void parseMultiplicativeExpr() throws SyntaxError {

    parseUnaryExpr();
    while (currentToken.kind == Token.MULT) {
      acceptOperator();
      parseUnaryExpr();
    }
  }

  void parseUnaryExpr() throws SyntaxError {

    switch (currentToken.kind) {
      case Token.MINUS:
        {
          acceptOperator();
          parseUnaryExpr();
        }
        break;
      case Token.PLUS:
         acceptOperator();
         parseUnaryExpr();
      default:
        parsePrimaryExpr();
        break;
       
    }
  }

  void parsePrimaryExpr() throws SyntaxError {

    switch (currentToken.kind) {

      case Token.ID:
        parseIdent();
        break;

      case Token.LPAREN:
        {
          accept();
          parseExpr();
	       match(Token.RPAREN);
        }
        break;

      case Token.INTLITERAL:
        parseIntLiteral();
        break;

      default:
        syntacticError("illegal parimary expression", currentToken.spelling);
       
    }
  }

// ========================== LITERALS ========================

  // Call these methods rather than accept().  In Assignment 3, 
  // literal AST nodes will be constructed inside these methods. 

  void parseIntLiteral() throws SyntaxError {

    if (currentToken.kind == Token.INTLITERAL) {
      currentToken = scanner.getToken();
    } else 
      syntacticError("integer literal expected here", "");
  }

  void parseFloatLiteral() throws SyntaxError {

    if (currentToken.kind == Token.FLOATLITERAL) {
      currentToken = scanner.getToken();
    } else 
      syntacticError("float literal expected here", "");
  }

  void parseBooleanLiteral() throws SyntaxError {

    if (currentToken.kind == Token.BOOLEANLITERAL) {
      currentToken = scanner.getToken();
    } else 
      syntacticError("boolean literal expected here", "");
  }

}
