/***
 * *
 * * Recogniser.java            
 * * Alex Piotrowski
 ***/

/* At this stage, this parser accepts a subset of VC defined	by
 * the following grammar. 
 *
 * You need to modify the supplied parsing methods (if necessary) and 
 * add the missing ones to obtain a parser for the VC language.
 *
 * [25 Feb 2021]

program       -> func-decl

// declaration

func-decl     -> void identifier "(" ")" compound-stmt

identifier    -> ID

// statements 
compound-stmt -> "{" stmt* "}" 
stmt          -> continue-stmt
    	      |  expr-stmt
continue-stmt -> continue ";"
expr-stmt     -> expr? ";"

// expressions 

expr                -> assignment-expr

assignment-expr     -> additive-expr

additive-expr       -> multiplicative-expr
                    |  additive-expr "+" multiplicative-expr

multiplicative-expr -> unary-expr
	            |  multiplicative-expr "*" unary-expr

unary-expr          -> "-" unary-expr
		    |  primary-expr


primary-expr        -> identifier
 		    |  INTLITERAL
		    | "(" expr ")"
*/

package VC.Recogniser;

import VC.Scanner.Scanner;
import VC.Scanner.SourcePosition;
import VC.Scanner.Token;
import VC.ErrorReporter;

public class Recogniser {

  private Scanner scanner;
  private ErrorReporter errorReporter;
  private Token currentToken;
  private boolean errorDetected;

  public Recogniser (Scanner lexer, ErrorReporter reporter) {
    scanner = lexer;
    errorReporter = reporter;

    currentToken = scanner.getToken();
    this.errorDetected = false;
  }

// match checks to see f the current token matches tokenExpected.
// If so, fetches the next token.
// If not, reports a syntactic error.

  void match(int tokenExpected) throws SyntaxError {
    if (currentToken.kind == tokenExpected) {
      currentToken = scanner.getToken();
    } else {
      System.out.println("DEBUG: Current Token is : " + Token.spell(currentToken.kind) + " (" + currentToken.kind +")");
      syntacticError("\"%\" expected here", Token.spell(tokenExpected));
    }
  }

 // accepts the current token and fetches the next
  void accept() {
    currentToken = scanner.getToken();
  }

   // another accept function. This one i took from wiki: https://en.wikipedia.org/wiki/Recursive_descent_parser
   boolean accept(int expectedToken){
      if (currentToken.kind == expectedToken){
         accept();
         return true;
      }
      return false;
   }

  void syntacticError(String messageTemplate, String tokenQuoted) throws SyntaxError {
    SourcePosition pos = currentToken.position;
    errorReporter.reportError(messageTemplate, tokenQuoted, pos);
    throw(new SyntaxError());
  }


// ========================== PROGRAMS ========================

  public void parseProgram() {

    try {
      while (currentToken.kind != Token.EOF && errorDetected == false){
         startParse();
      }
      if (currentToken.kind != Token.EOF) {
        syntacticError("\"%\" wrong result type for a function", currentToken.spelling);
      }
    }
    catch (SyntaxError s) {  }
  }


void startParse() throws SyntaxError {
   if (currentToken.kind == Token.VOID){
      parseVoidFuncDecl();
   } else if (currentToken.kind == Token.INT || currentToken.kind == Token.BOOLEAN || currentToken.kind == Token.FLOAT){
      match(currentToken.kind);
      match(currentToken.ID);
      if (currentToken.kind == Token.LPAREN){
         // function
         match(Token.LPAREN);
         
         // variables within the parens
         while(currentToken.kind != Token.RPAREN){
            if (currentToken.kind == Token.INT || currentToken.kind == Token.BOOLEAN || currentToken.kind == Token.FLOAT){
               match(currentToken.kind);
               match(Token.ID);
               if (currentToken.kind == Token.LBRACKET){
                  // using an array within the arguments of the function
                  match(Token.LBRACKET);
                  // TODO review this below
                  while (currentToken.kind != Token.RBRACKET){
                     match(Token.INTLITERAL);
                  }
                  match(Token.RBRACKET);
               }
            } else {
               System.out.println("I think we will have an issue within the arguments of a function");
               break;
            }
            
            if (currentToken.kind == Token.COMMA){
               match(Token.COMMA);
            }
         }
         
         match(Token.RPAREN);
         parseCompoundStmt();
      } else if (currentToken.kind == Token.EQ) {
         // Is equal to something else
         match(Token.EQ);      
         while (currentToken.kind != Token.SEMICOLON){
            match(currentToken.kind);     // accept everything for now
         }
         match(Token.SEMICOLON);
         startParse();
      } else if (currentToken.kind == Token.LBRACKET) {
         // Its an array declaration;
         match(Token.LBRACKET);
         match(Token.INTLITERAL);
         match(Token.RBRACKET);
         match(Token.EQ);
         while(currentToken.kind != Token.SEMICOLON){
            match(currentToken.kind);
         }
         match(Token.SEMICOLON);
         startParse();
      } else {
         match(Token.SEMICOLON);
         startParse();
      }
   } else {
      errorDetected = true;
      
      // System.out.println("Current Token is : " + Token.spell(currentToken.kind) + " (" + currentToken.kind +")");
      // System.out.println("We got a problem EDIT: its fine is token is EOF");
      return;
   }

}

// ========================== DECLARATIONS ========================

  void parseVoidFuncDecl() throws SyntaxError {

    match(Token.VOID);
    parseIdent();
    match(Token.LPAREN);
    // need to account or variables within the 
    if (currentToken.kind == Token.INT || currentToken.kind == Token.FLOAT || currentToken.kind == Token.BOOLEAN){
      do {
         if (currentToken.kind == Token.INT || currentToken.kind == Token.FLOAT || currentToken.kind == Token.BOOLEAN){
            match(currentToken.kind);
         } else {
            break;
         }
         match(Token.ID);
      } while (accept(Token.COMMA));
    }
    match(Token.RPAREN);
    parseCompoundStmt();
  }

// ======================= STATEMENTS ==============================


  void parseCompoundStmt() throws SyntaxError {

    match(Token.LCURLY);
    parseStmtList();
    match(Token.RCURLY);
  }

 // Here, a new nontermial has been introduced to define { stmt } *
  void parseStmtList() throws SyntaxError {

    while (currentToken.kind != Token.RCURLY) {
      parseStmt();
    }
  }

  void parseStmt() throws SyntaxError {
   // System.out.println(currentToken.kind);
    switch (currentToken.kind) {
      
      case Token.CONTINUE:
         parseContinueStmt();
         break;
      case Token.BREAK:
         parseBreakStmt();
         break;
      case Token.ELSE:
         parseElseStmt();
         break;
      case Token.IF:
         parseIfStmt();
         break;
      case Token.RETURN:
         parseReturnStmt();
         break;
      case Token.WHILE:
         parseWhileStmt();
         break;
      case Token.FOR:
         parseForStmt();
         break;
      default:
         parseExprStmt();
         break;

    }
  }

   void parseForStmt() throws SyntaxError {
      match(Token.FOR);
      match(Token.LPAREN);

      parseExprStmt();
      parseExprStmt();
      parseExprStmtFromIfStmt();
      match(Token.RPAREN);
      match(Token.LCURLY);
      while (currentToken.kind != Token.RCURLY) {
         parseStmt();
      }
      match(Token.RCURLY);
   }

   void parseReturnStmt() throws SyntaxError {
      match(Token.RETURN);
      while (currentToken.kind == Token.ID || currentToken.kind == Token.INTLITERAL || currentToken.kind == Token.FLOATLITERAL 
               || currentToken.kind == Token.BOOLEANLITERAL || currentToken.kind == Token.STRINGLITERAL || currentToken.kind == Token.MULT
               || currentToken.kind == Token.LPAREN || currentToken.kind == Token.RPAREN || currentToken.kind == Token.MINUS){
         match(currentToken.kind);
      }
      match(Token.SEMICOLON);
   }

   void parseWhileStmt() throws SyntaxError {
      match(Token.WHILE);
      match(Token.LPAREN);
      parseExprStmtFromIfStmt();
      match(Token.RPAREN);
      if (currentToken.kind != Token.LCURLY){
         // TODO review this
         match(Token.SEMICOLON);
      } else {
         match(Token.LCURLY);
         while (currentToken.kind != Token.RCURLY) {
            parseStmt();
         }
         match(Token.RCURLY);
      }
   }

   void parseElseStmt() throws SyntaxError {
      match(Token.ELSE);
      // For now just assume that else statements have to be followed by "{"
      if (currentToken.kind == Token.LCURLY){
         match(Token.LCURLY);
         parseStmtList();
         match(Token.RCURLY);
      } else {
         // single line
         parseStmt();
      }
   }

   void parseIfStmt() throws SyntaxError {
      match(Token.IF);
      match(Token.LPAREN);
      parseExprStmtFromIfStmt();
      match(Token.RPAREN);
      
      // For now just assume that if statements have to be followed by "{"
      if (currentToken.kind == Token.LCURLY){
         match(Token.LCURLY);
         parseStmtList();
         match(Token.RCURLY);
      } else {
         // single line
         parseStmt();
      }
   }

   void parseBreakStmt() throws SyntaxError {
      match(Token.BREAK);
      match(Token.SEMICOLON);
   }

  void parseContinueStmt() throws SyntaxError {

    match(Token.CONTINUE);
    match(Token.SEMICOLON);

  }

   void parseExprStmtFromIfStmt() throws SyntaxError {
          if (currentToken.kind == Token.ID
        || currentToken.kind == Token.INTLITERAL
        || currentToken.kind == Token.MINUS
        || currentToken.kind == Token.LPAREN
        || currentToken.kind == Token.PLUS) {
        parseExpr();
        while (currentToken.kind == Token.EQ || currentToken.kind == Token.LTEQ || currentToken.kind == Token.GTEQ || currentToken.kind == Token.EQEQ) {
         match(currentToken.kind);
         parseExpr();
        }
    }
   }

   void parseExprStmtInsideForStmt() throws SyntaxError {
      if (currentToken.kind == Token.ID || currentToken.kind == Token.INTLITERAL || currentToken.kind == Token.MINUS || currentToken.kind == Token.LPAREN || currentToken.kind == Token.PLUS){
         parseExpr();
         while (currentToken.kind == Token.EQ || currentToken.kind == Token.LTEQ || currentToken.kind == Token.GTEQ) {
            match(currentToken.kind);
            parseExpr();
         }
        } else if (currentToken.kind == Token.INT) { 
      // Declaring an INT variable here

      match(Token.INT);
      match(Token.ID);
      if (currentToken.kind == Token.SEMICOLON){
         match(Token.SEMICOLON);
      } else if (currentToken.kind == Token.LBRACKET){
         // array
         match(Token.LBRACKET);
         if (currentToken.kind != Token.INTLITERAL){
            match(Token.RBRACKET);
         } else {
            match(Token.INTLITERAL);
            match(Token.RBRACKET);
         }
         if (currentToken.kind == Token.COMMA){
            // scan in the next variable;
            // TODO change this to a while loop.
            match(Token.COMMA);
            match(Token.ID);
            match(Token.LBRACKET);
            match(Token.INTLITERAL);
            match(Token.RBRACKET);
         }
         
         if (currentToken.kind == Token.EQ){
            match(currentToken.kind);
            parseExpr();
         }
         
      }
      }
   }

  void parseExprStmt() throws SyntaxError {

    if (currentToken.kind == Token.ID
        || currentToken.kind == Token.INTLITERAL
        || currentToken.kind == Token.MINUS
        || currentToken.kind == Token.LPAREN
        || currentToken.kind == Token.PLUS){
        parseExpr();
        while (currentToken.kind == Token.EQ || currentToken.kind == Token.LTEQ || currentToken.kind == Token.GTEQ) {
         match(currentToken.kind);
         parseExpr();
        }
        match(Token.SEMICOLON);
    } else if (currentToken.kind == Token.INT) { 
      // Declaring an INT variable here
      System.out.println("here");
      match(Token.INT);
      match(Token.ID);
      if (currentToken.kind == Token.LBRACKET){
         // array
         match(Token.LBRACKET);
         if (currentToken.kind != Token.INTLITERAL){
            match(Token.RBRACKET);
         } else {
            match(Token.INTLITERAL);
            match(Token.RBRACKET);
         }
         if (currentToken.kind == Token.COMMA){
            // scan in the next variable;
            // TODO change this to a while loop.
            match(Token.COMMA);
            match(Token.ID);
            match(Token.LBRACKET);
            match(Token.INTLITERAL);
            match(Token.RBRACKET);
         }
         
         if (currentToken.kind == Token.EQ){
            match(currentToken.kind);
            parseExpr();
         }
         
      } else {
         match(Token.SEMICOLON);
      }
    } else if (currentToken.kind == Token.FLOAT) {
      
      match(Token.FLOAT);
      match(Token.ID);
      if (currentToken.kind == Token.LBRACKET){
         match(Token.LBRACKET);
         match(Token.INTLITERAL);
         match(Token.RBRACKET);
         
         if (currentToken.kind == Token.EQ){
            match(Token.EQ);
            match(Token.LCURLY);
            while(currentToken.kind != Token.RCURLY){
               // This will need reviewing TODO
               match(currentToken.kind);
            }
            match(Token.RCURLY);
            match(Token.SEMICOLON);
         }
      } else if (currentToken.kind == Token.SEMICOLON){
         match(Token.SEMICOLON);
      }
    } else if (currentToken.kind == Token.BOOLEANLITERAL) {
      parseExpr();
    } else {
      match(Token.SEMICOLON);
    }
  }



// ======================= IDENTIFIERS ======================

 // Call parseIdent rather than match(Token.ID). 
 // In Assignment 3, an Identifier node will be constructed in here.


  void parseIdent() throws SyntaxError {

    if (currentToken.kind == Token.ID) {
      currentToken = scanner.getToken();
    } else 
      syntacticError("identifier expected here", "");
  }

// ======================= OPERATORS ======================

 // Call acceptOperator rather than accept(). 
 // In Assignment 3, an Operator Node will be constructed in here.

  void acceptOperator() throws SyntaxError {

    currentToken = scanner.getToken();
  }


// ======================= EXPRESSIONS ======================

  void parseExpr() throws SyntaxError {
    parseAssignExpr();
  }


  void parseAssignExpr() throws SyntaxError {

    parseAdditiveExpr();

  }

  void parseAdditiveExpr() throws SyntaxError {

    parseMultiplicativeExpr();
    while (currentToken.kind == Token.PLUS) {
      acceptOperator();
      parseMultiplicativeExpr();
    }
  }

  void parseMultiplicativeExpr() throws SyntaxError {

    parseUnaryExpr();
    while (currentToken.kind == Token.MULT) {
      acceptOperator();
      parseUnaryExpr();
    }
  }

  void parseUnaryExpr() throws SyntaxError {

    switch (currentToken.kind) {
      case Token.PLUS:
      case Token.MINUS:
        {
          acceptOperator();
          parseUnaryExpr();
        }
        break;

      default:
        parsePrimaryExpr();
        break;
       
    }
  }

  void parsePrimaryExpr() throws SyntaxError {

    switch (currentToken.kind) {

      case Token.ID:
        parseIdent();
        if (currentToken.kind == Token.LBRACKET){
            // Array e.g. a[1];
            match(Token.LBRACKET);
            match(Token.INTLITERAL);
            match(Token.RBRACKET);
        } else if (currentToken.kind == Token.LPAREN){
            // Could be a function here
            match(Token.LPAREN);
            while(currentToken.kind != Token.RPAREN){
               if (currentToken.kind == Token.ID || currentToken.kind == Token.INTLITERAL || currentToken.kind == Token.FLOATLITERAL
                     || currentToken.kind == Token.BOOLEANLITERAL || currentToken.kind == Token.STRINGLITERAL){
                  match(currentToken.kind);
               } else if (currentToken.kind == Token.COMMA){
                  match(Token.COMMA);
               } else {
                  System.out.println("We got a problem here 1");
                  break;
               }
            }
            match(Token.RPAREN);
        }
        break;
      case Token.LCURLY:
         // parse array list
         match(Token.LCURLY);
         while (currentToken.kind != Token.RCURLY){
            if (currentToken.kind == Token.ID || currentToken.kind == Token.INTLITERAL || currentToken.kind == Token.FLOATLITERAL
                     || currentToken.kind == Token.BOOLEANLITERAL || currentToken.kind == Token.STRINGLITERAL){
               match(currentToken.kind);
            } else if (currentToken.kind == Token.COMMA){
               match(Token.COMMA);
            } else {
               System.out.println("We got a problem here 2");
               break;
            }
         }
         match(Token.RCURLY);
         match(Token.SEMICOLON);
         break;
      case Token.LPAREN:
        {
          accept();
          parseExpr();
	       match(Token.RPAREN);
        }
        break;

      case Token.INTLITERAL:
        parseIntLiteral();
        break;
      case Token.FLOATLITERAL:
         parseFloatLiteral();
         break;
      case Token.BOOLEANLITERAL:
         parseBooleanLiteral();
         break;

      default:
        syntacticError("illegal primary expression", currentToken.spelling);
       
    }
  }

// ========================== LITERALS ========================

  // Call these methods rather than accept().  In Assignment 3, 
  // literal AST nodes will be constructed inside these methods. 

  void parseIntLiteral() throws SyntaxError {

    if (currentToken.kind == Token.INTLITERAL) {
      currentToken = scanner.getToken();
    } else 
      syntacticError("integer literal expected here", "");
  }

  void parseFloatLiteral() throws SyntaxError {

    if (currentToken.kind == Token.FLOATLITERAL) {
      currentToken = scanner.getToken();
    } else 
      syntacticError("float literal expected here", "");
  }

  void parseBooleanLiteral() throws SyntaxError {

    if (currentToken.kind == Token.BOOLEANLITERAL) {
      currentToken = scanner.getToken();
    } else 
      syntacticError("boolean literal expected here", "");
  }

}
